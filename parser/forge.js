/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var forge = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,17,24,30,31,32,33,34,35,36,37,38,39,40,41,45,63,64,65,66,75,79,139,140],$V1=[5,24,30,31,32,33,34,35,36,37,38,39,40,41,45,63,64,65,66,75,79,139,140],$V2=[5,30,31,32,33,34,35,36,37,38,39,40,41,45,63,64,65,66,75,79,139,140],$V3=[1,21],$V4=[45,63,64,65,66,140],$V5=[5,17,24,30,31,32,33,34,35,36,37,38,39,40,41,45,63,64,65,66,75,79,135,139,140],$V6=[45,63,64,65,66],$V7=[1,71],$V8=[1,72],$V9=[57,90],$Va=[1,82],$Vb=[1,87],$Vc=[1,93],$Vd=[87,90],$Ve=[48,71,85,105,106,107,108,109,110,111,112,113,114,115,116,127,132,134],$Vf=[1,101],$Vg=[1,103],$Vh=[1,102],$Vi=[1,105],$Vj=[1,104],$Vk=[48,52,53,59],$Vl=[1,137],$Vm=[1,122],$Vn=[1,123],$Vo=[1,124],$Vp=[1,125],$Vq=[1,126],$Vr=[1,127],$Vs=[1,128],$Vt=[1,129],$Vu=[1,130],$Vv=[1,131],$Vw=[1,132],$Vx=[1,133],$Vy=[1,134],$Vz=[1,138],$VA=[1,135],$VB=[2,156],$VC=[48,81],$VD=[1,161],$VE=[1,162],$VF=[1,148],$VG=[1,149],$VH=[1,150],$VI=[1,151],$VJ=[1,152],$VK=[1,153],$VL=[1,154],$VM=[1,155],$VN=[1,156],$VO=[1,157],$VP=[1,158],$VQ=[1,159],$VR=[1,160],$VS=[48,50,57,70,71,85,87,88,90,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,134],$VT=[1,173],$VU=[48,141],$VV=[50,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"forge_specification":3,"forge_module":4,"EOF":5,"eval_module":6,"lang_declaration":7,"forge_module_repetition0":8,"forge_module_repetition1":9,"forge_module_repetition2":10,"LANG":11,"module":12,"FORGE":13,"FORGE_FROGLET":14,"FORGE_TEMPORAL":15,"import":16,"OPEN":17,"qual_name":18,"import_option0":19,"import_option1":20,"FILE_PATH":21,"import_option2":22,"option":23,"OPTION":24,"option_group0":25,"paragraphs":26,"sig_decl":27,"pred_decl":28,"fun_decl":29,"assert_decl":30,"cmd_decl":31,"test_expect_decl":32,"sexpr_decl":33,"query_decl":34,"eval_rel_decl":35,"option_decl":36,"inst_decl":37,"example_decl":38,"property_decl":39,"quantified_property_decl":40,"test_suite_decl":41,"sig_decl_option0":42,"sig_decl_option1":43,"sig_decl_option2":44,"SIG":45,"name_list":46,"sig_decl_option3":47,"{":48,"sig_decl_option4":49,"}":50,"sig_ext":51,"EXTENDS":52,"IN":53,"sig_ext_repetition0":54,"field_list":55,"field":56,",":57,"field_option0":58,":":59,"relation_mult":60,"relation_expr":61,"mult":62,"LONE":63,"SOME":64,"ONE":65,"TWO":66,"SET":67,"PFUNC":68,"FUNC":69,"->":70,"IDEN":71,"qual_name_repetition0":72,"qual_namelist":73,"qual_namelist_repetition0":74,"PRED":75,"name":76,"pred_decl_option0":77,"block":78,"FUN":79,"fun_decl_option0":80,"COLON":81,"fun_decl_option1":82,"expr":83,"para_decls":84,"(":85,"para_decls_option0":86,")":87,"[":88,"para_decls_option1":89,"]":90,"para_decl_list":91,"para_decl":92,"para_decl_option0":93,"para_decl_option1":94,"helper_mult":95,"expr_list":96,"prefix_expr":97,"infix_expr":98,"postfix_expr":99,"basic_expr":100,"prefix_operator":101,"infix_operator":102,"Expr":103,"postfix_operator":104,"NOT":105,"ALWAYS":106,"EVENTUALLY":107,"AFTER":108,"BEFORE":109,"ONCE":110,"HISTORICALLY":111,"BACKTICK":112,"PRIME":113,"TILDE":114,"CARET":115,"STAR":116,"OR":117,"AND":118,"IFF":119,"IMPLIES":120,"XOR":121,"UNTIL":122,"RELEASE":123,"SINCE":124,"TRIGGERED":125,"PLUS":126,"MINUS":127,"AMPERSAND":128,".":129,"const":130,"block_repetition0":131,"NONE":132,"const_option0":133,"INT":134,"AS":135,"option_group0_option0":136,"-":137,"NUMBER":138,"VAR":139,"ABSTRACT":140,"+":141,"DISJ":142,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"LANG",13:"FORGE",14:"FORGE_FROGLET",15:"FORGE_TEMPORAL",17:"OPEN",21:"FILE_PATH",24:"OPTION",30:"assert_decl",31:"cmd_decl",32:"test_expect_decl",33:"sexpr_decl",34:"query_decl",35:"eval_rel_decl",36:"option_decl",37:"inst_decl",38:"example_decl",39:"property_decl",40:"quantified_property_decl",41:"test_suite_decl",45:"SIG",48:"{",50:"}",52:"EXTENDS",53:"IN",57:",",59:":",63:"LONE",64:"SOME",65:"ONE",66:"TWO",67:"SET",68:"PFUNC",69:"FUNC",70:"->",71:"IDEN",75:"PRED",76:"name",79:"FUN",81:"COLON",85:"(",87:")",88:"[",90:"]",103:"Expr",105:"NOT",106:"ALWAYS",107:"EVENTUALLY",108:"AFTER",109:"BEFORE",110:"ONCE",111:"HISTORICALLY",112:"BACKTICK",113:"PRIME",114:"TILDE",115:"CARET",116:"STAR",117:"OR",118:"AND",119:"IFF",120:"IMPLIES",121:"XOR",122:"UNTIL",123:"RELEASE",124:"SINCE",125:"TRIGGERED",126:"PLUS",127:"MINUS",128:"AMPERSAND",129:".",132:"NONE",134:"INT",135:"AS",137:"-",138:"NUMBER",139:"VAR",140:"ABSTRACT",141:"+",142:"DISJ"},
productions_: [0,[3,2],[3,2],[6,0],[4,4],[7,2],[12,1],[12,1],[12,1],[16,4],[16,3],[23,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[27,9],[51,2],[51,3],[55,1],[55,3],[56,5],[62,1],[62,1],[62,1],[62,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[61,1],[61,3],[46,1],[46,3],[18,2],[73,2],[28,4],[29,7],[84,3],[84,3],[91,1],[91,3],[92,5],[95,1],[95,1],[95,1],[95,1],[95,1],[96,1],[96,3],[83,1],[83,1],[83,1],[83,1],[97,2],[98,3],[99,2],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[104,3],[100,1],[100,1],[100,1],[100,3],[78,3],[130,1],[130,2],[130,1],[8,0],[8,2],[9,0],[9,2],[10,0],[10,2],[19,0],[19,3],[20,0],[20,2],[22,0],[22,2],[136,0],[136,1],[25,1],[25,1],[25,2],[42,0],[42,1],[43,0],[43,1],[44,0],[44,1],[47,0],[47,1],[49,0],[49,1],[54,0],[54,3],[58,0],[58,1],[72,0],[72,3],[74,0],[74,3],[77,0],[77,1],[80,0],[80,1],[82,0],[82,1],[86,0],[86,1],[89,0],[89,1],[93,0],[93,1],[94,0],[94,1],[131,0],[131,2],[133,0],[133,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 console.log("Valid forge module declaration with imports:", $$[$0-3], $$[$0-2], $$[$0-1]); return { module: $$[$0-3], imports: $$[$0-2], options: $$[$0-1] }; 
break;
case 5:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = 'forge'; 
break;
case 7:
 this.$ = 'forge/bsl'; 
break;
case 8:
 this.$ = 'forge/temporal'; 
break;
case 11:
 this.$ = { type: 'option', key: $$[$0-1], value: $$[$0] }; 
break;
case 27:
 this.$ = { type: 'sig', name: $$[$0-5], ext: $$[$0-4], fields: $$[$0-2], constraints: $$[$0] }; 
break;
case 47:
 this.$ = $$[$0-1] + ($$[$0] ? $$[$0].join('') : ''); 
break;
case 48:
 this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 49:
 this.$ = { type: 'predicate', name: $$[$0-2], parameters: $$[$0-1], body: $$[$0] }; 
break;
case 50:
 this.$ = { type: 'function', name: $$[$0-5], parameters: $$[$0-4], return_type: $$[$0-2], body: $$[$0-1] }; 
break;
case 105: case 107: case 109: case 132: case 136: case 138: case 154:
this.$ = [];
break;
case 106: case 108: case 110: case 155:
$$[$0-1].push($$[$0]);
break;
case 133: case 137: case 139:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,11:[1,5]},{1:[3]},{5:[1,6]},{5:[1,7]},o($V0,[2,105],{8:8}),{12:9,13:[1,10],14:[1,11],15:[1,12]},{1:[2,1]},{1:[2,2]},o($V1,[2,107],{9:13,16:14,17:[1,15]}),o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,7]),o($V0,[2,8]),o($V2,[2,109],{10:16,23:17,24:[1,18]}),o($V0,[2,106]),{18:19,21:[1,20],71:$V3},o($V4,[2,122],{26:22,27:23,28:24,29:25,42:38,5:[2,4],30:[1,26],31:[1,27],32:[1,28],33:[1,29],34:[1,30],35:[1,31],36:[1,32],37:[1,33],38:[1,34],39:[1,35],40:[1,36],41:[1,37],75:[1,39],79:[1,40],139:[1,41]}),o($V1,[2,108]),{18:42,71:$V3},o($V5,[2,111],{19:43,88:[1,44]}),o($V0,[2,115],{22:45,135:[1,46]}),o([5,17,21,24,30,31,32,33,34,35,36,37,38,39,40,41,45,48,50,57,63,64,65,66,70,71,75,79,88,90,129,135,137,138,139,140,141],[2,136],{72:47}),o($V2,[2,110]),o($V2,[2,12]),o($V2,[2,13]),o($V2,[2,14]),o($V2,[2,15]),o($V2,[2,16]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),o($V2,[2,25]),o($V2,[2,26]),o($V6,[2,124],{43:48,140:[1,49]}),{76:[1,50]},{76:[1,51]},o($V4,[2,123]),{18:53,21:[1,54],25:52,71:$V3,136:55,137:[1,56],138:[2,117]},o($V0,[2,113],{20:57,135:[1,58]}),{18:60,71:$V3,73:59},o($V0,[2,10]),{71:[1,61]},o([5,17,21,24,30,31,32,33,34,35,36,37,38,39,40,41,45,48,50,57,63,64,65,66,70,71,75,79,85,87,88,90,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,134,135,137,138,139,140,141],[2,47],{129:[1,62]}),{44:63,45:[2,126],62:64,63:[1,65],64:[1,66],65:[1,67],66:[1,68]},o($V6,[2,125]),{48:[2,140],77:69,84:70,85:$V7,88:$V8},{80:73,81:[2,142],84:74,85:$V7,88:$V8},o($V1,[2,11]),o($V1,[2,119]),o($V1,[2,120]),{138:[1,75]},{138:[2,118]},o($V0,[2,9]),{71:[1,76]},{90:[1,77]},o($V9,[2,138],{74:78}),o($V0,[2,116]),{71:[1,79]},{45:[1,80]},{45:[2,127]},{45:[2,33]},{45:[2,34]},{45:[2,35]},{45:[2,36]},{48:$Va,78:81},{48:[2,141]},o([71,87],[2,146],{86:83,91:84,92:85,93:86,142:$Vb}),o([71,90],[2,148],{92:85,93:86,89:88,91:89,142:$Vb}),{81:[1,90]},{81:[2,143]},o($V1,[2,121]),o($V0,[2,114]),o($V5,[2,112]),{57:[1,91],90:[2,48]},o([5,17,21,24,30,31,32,33,34,35,36,37,38,39,40,41,45,48,50,57,63,64,65,66,70,71,75,79,85,87,88,90,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,134,135,137,138,139,140,141],[2,137]),{46:92,71:$Vc},o($V2,[2,49]),o([48,50,71,85,105,106,107,108,109,110,111,112,113,114,115,116,127,132,134],[2,154],{131:94}),{87:[1,95]},{87:[2,147]},o($Vd,[2,53],{57:[1,96]}),{46:97,71:$Vc},{71:[2,151]},{90:[1,98]},{90:[2,149]},o($Ve,[2,144],{82:99,95:100,63:$Vf,65:$Vg,67:$Vh,68:$Vi,69:$Vj}),{18:106,71:$V3},{47:107,48:[2,128],51:108,52:[1,109],53:[1,110]},o($Vk,[2,45],{57:[1,111]}),{18:121,48:$Va,50:[1,112],71:$Vl,78:120,83:113,85:$Vm,97:114,98:115,99:116,100:117,101:118,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,127:$Vz,130:119,132:$VA,133:136,134:$VB},o($VC,[2,51]),{71:[2,150],91:139,92:85,93:86,142:$Vb},{59:[1,140]},o($VC,[2,52]),{18:121,48:$Va,71:$Vl,78:120,83:141,85:$Vm,97:114,98:115,99:116,100:117,101:118,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,127:$Vz,130:119,132:$VA,133:136,134:$VB},o($Ve,[2,145]),o($Ve,[2,56]),o($Ve,[2,57]),o($Ve,[2,58]),o($Ve,[2,59]),o($Ve,[2,60]),o($V9,[2,139]),{48:[1,142]},{48:[2,129]},{18:143,71:$V3},{18:144,71:$V3},{46:145,71:$Vc},o([5,30,31,32,33,34,35,36,37,38,39,40,41,45,48,50,57,63,64,65,66,70,71,75,79,85,87,88,90,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,134,139,140],[2,101]),o([48,50,71,85,105,106,107,108,109,110,111,112,113,114,115,116,132,134],[2,155],{102:146,104:147,70:$VD,88:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR}),o($VS,[2,63]),o($VS,[2,64]),o($VS,[2,65]),o($VS,[2,66]),{18:121,48:$Va,71:$Vl,78:120,83:163,85:$Vm,97:114,98:115,99:116,100:117,101:118,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,127:$Vz,130:119,132:$VA,133:136,134:$VB},o($VS,[2,97]),o($VS,[2,98]),o($VS,[2,99]),{18:121,48:$Va,71:$Vl,78:120,83:164,85:$Vm,97:114,98:115,99:116,100:117,101:118,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,127:$Vz,130:119,132:$VA,133:136,134:$VB},o($Ve,[2,70]),o($Ve,[2,71]),o($Ve,[2,72]),o($Ve,[2,73]),o($Ve,[2,74]),o($Ve,[2,75]),o($Ve,[2,76]),o($Ve,[2,77]),o($Ve,[2,78]),o($Ve,[2,79]),o($Ve,[2,80]),o($Ve,[2,81]),o($VS,[2,102]),{134:[1,165]},o($VS,[2,104],{72:47}),{134:[2,157]},o($Vd,[2,54]),o($Ve,[2,152],{94:166,95:167,63:$Vf,65:$Vg,67:$Vh,68:$Vi,69:$Vj}),{48:$Va,70:$VD,78:168,88:$VE,102:146,104:147,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR},o([50,71],[2,130],{49:169,55:170,56:171,58:172,139:$VT}),{48:[2,28]},o($VU,[2,132],{54:174}),o($Vk,[2,46]),{103:[1,175]},o($VS,[2,69]),{103:[2,82]},{103:[2,83]},{103:[2,84]},{103:[2,85]},{103:[2,86]},{103:[2,87]},{103:[2,88]},{103:[2,89]},{103:[2,90]},{103:[2,91]},{103:[2,92]},{103:[2,93]},{103:[2,94]},{103:[2,95]},{18:121,48:$Va,71:$Vl,78:120,83:177,85:$Vm,96:176,97:114,98:115,99:116,100:117,101:118,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,127:$Vz,130:119,132:$VA,133:136,134:$VB},o([48,50,57,71,85,87,90,105,106,107,108,109,110,111,112,113,114,115,116,132,134],[2,67],{102:146,104:147,70:$VD,88:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR}),{70:$VD,87:[1,178],88:$VE,102:146,104:147,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR},o($VS,[2,103]),{18:121,48:$Va,71:$Vl,78:120,83:179,85:$Vm,97:114,98:115,99:116,100:117,101:118,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,127:$Vz,130:119,132:$VA,133:136,134:$VB},o($Ve,[2,153]),o($V2,[2,50]),{50:[1,180]},{50:[2,131]},{50:[2,30],57:[1,181]},{46:182,71:$Vc},{71:[2,135]},{48:[2,29],141:[1,183]},o($VS,[2,68]),{90:[1,184]},{57:[1,185],70:$VD,88:$VE,90:[2,61],102:146,104:147,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR},o($VS,[2,100]),o([57,87,90],[2,55],{102:146,104:147,70:$VD,88:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR}),o($V2,[2,27]),{55:186,56:171,58:172,71:[2,134],139:$VT},{59:[1,187]},{18:188,71:$V3},o($VS,[2,96]),{18:121,48:$Va,71:$Vl,78:120,83:177,85:$Vm,96:189,97:114,98:115,99:116,100:117,101:118,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,127:$Vz,130:119,132:$VA,133:136,134:$VB},{50:[2,31]},{60:190,63:[1,191],65:[1,193],66:[1,194],67:[1,192],68:[1,195],69:[1,196]},o($VU,[2,133]),{90:[2,62]},{18:198,61:197,71:$V3},{71:[2,37]},{71:[2,38]},{71:[2,39]},{71:[2,40]},{71:[2,41]},{71:[2,42]},o($VV,[2,32]),o($VV,[2,43],{70:[1,199]}),{18:198,61:200,71:$V3},o($VV,[2,44])],
defaultActions: {6:[2,1],7:[2,2],56:[2,118],64:[2,127],65:[2,33],66:[2,34],67:[2,35],68:[2,36],70:[2,141],74:[2,143],84:[2,147],87:[2,151],89:[2,149],108:[2,129],138:[2,157],143:[2,28],148:[2,82],149:[2,83],150:[2,84],151:[2,85],152:[2,86],153:[2,87],154:[2,88],155:[2,89],156:[2,90],157:[2,91],158:[2,92],159:[2,93],160:[2,94],161:[2,95],170:[2,131],173:[2,135],186:[2,31],189:[2,62],191:[2,37],192:[2,38],193:[2,39],194:[2,40],195:[2,41],196:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* Definitions and imports go here */
const yy = {};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
/* Definitions and imports go here */

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore whitespace */
break;
case 1:/* Ignore newlines */
break;
case 2:return 11;
break;
case 3:return 15;
break;
case 4:return 14;
break;
case 5:return 13;
break;
case 6:/* Ignore comment */
break;
case 7:/* Ignore comment */
break;
case 8:/* Ignore comment */
break;
case 9: /* Ignore multiline comments */ 
break;
case 10:return 17;
break;
case 11:return 135;
break;
case 12:return 24;
break;
case 13:return 45;
break;
case 14:return 140;
break;
case 15:return 52;
break;
case 16:return 139;
break;
case 17:return 53;
break;
case 18:return 63;
break;
case 19:return 65;
break;
case 20:return 67;
break;
case 21:return 68;
break;
case 22:return 69;
break;
case 23:return 142;
break;
case 24:return 118;
break;
case 25:return 117;
break;
case 26:return 121;
break;
case 27:return 120;
break;
case 28:return 120;
break;
case 29:return 119;
break;
case 30:return 119;
break;
case 31:return 122;
break;
case 32:return 123;
break;
case 33:return 124;
break;
case 34:return 125; /* WHAT IS THIS? */
break;
case 35:return 128;
break;
case 36:return 112;
break;
case 37:return 126;
break;
case 38:return 127;
break;
case 39:return 116;
break;
case 40:return 113;
break;
case 41:return 114;
break;
case 42:return 115;
break;
case 43:return 'ALL';
break;
case 44:return 64;
break;
case 45:return 'NO';
break;
case 46:return 132;
break;
case 47:return 105;
break;
case 48:return 106;
break;
case 49:return 107;
break;
case 50:return 108;
break;
case 51:return 109;
break;
case 52:return 110;
break;
case 53:return 111;
break;
case 54:return 'EQUALS';
break;
case 55:return 'NOT_EQUALS';
break;
case 56:return 'LESS_THAN';
break;
case 57:return 'LEQ';
break;
case 58:return 'GREATER_THAN';
break;
case 59:return 'GEQ';
break;
case 60:return 88;
break;
case 61:return 90;
break;
case 62:return 48;
break;
case 63:return 50;
break;
case 64:return 85;
break;
case 65:return 87;
break;
case 66:return 129;
break;
case 67:return 57;
break;
case 68:return 59;
break;
case 69:return 70;
break;
case 70:return 71;
break;
case 71:return 134;
break;
case 72:return 21;
break;
case 73: console.log('Unmatched text: ' + yy_.yytext); 
break;
case 74:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\n]+)/,/^(?:#lang\b)/,/^(?:forge\/temporal\b)/,/^(?:forge\/bsl\b)/,/^(?:forge\b)/,/^(?:--.*)/,/^(?:\/\/.*)/,/^(?:\/\\\*.*\\\*\/)/,/^(?:\/\\\*\[\^\*\]\*\\\*\+\(\?:\[\^\/\*\]\[\^\*\]\*\\\*\+\)\*\/)/,/^(?:open\b)/,/^(?:as\b)/,/^(?:option\b)/,/^(?:sig\b)/,/^(?:abstract\b)/,/^(?:extends\b)/,/^(?:var\b)/,/^(?:in\b)/,/^(?:lone\b)/,/^(?:one\b)/,/^(?:set\b)/,/^(?:pfunc\b)/,/^(?:func\b)/,/^(?:disj\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:xor\b)/,/^(?:implies\b)/,/^(?:=>)/,/^(?:iff\b)/,/^(?:<=>)/,/^(?:until\b)/,/^(?:release\b)/,/^(?:since\b)/,/^(?:triggered\b)/,/^(?:&)/,/^(?:`)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:')/,/^(?:~)/,/^(?:\^)/,/^(?:all\b)/,/^(?:some\b)/,/^(?:no\b)/,/^(?:none\b)/,/^(?:not\b)/,/^(?:always\b)/,/^(?:eventually\b)/,/^(?:after\b)/,/^(?:before\b)/,/^(?:once\b)/,/^(?:historically\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:->)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = forge;
exports.Parser = forge.Parser;
exports.parse = function () { return forge.parse.apply(forge, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}