/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var forge = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,17,24,46,64,65,66,67,171,172],$V1=[5,24,46,64,65,66,67,171,172],$V2=[5,46,64,65,66,67,171,172],$V3=[1,21],$V4=[46,64,65,66,67,172],$V5=[5,17,24,46,64,65,66,67,167,171,172],$V6=[5,17,21,24,46,49,51,58,64,65,66,67,71,72,87,89,161,167,169,170,171,172,173],$V7=[46,64,65,66,67],$V8=[58,89],$V9=[1,59],$Va=[49,53,54,60],$Vb=[1,74],$Vc=[49,173],$Vd=[51,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"forge_specification":3,"forge_module":4,"EOF":5,"eval_module":6,"lang_declaration":7,"forge_module_repetition0":8,"forge_module_repetition1":9,"forge_module_repetition2":10,"LANG":11,"module":12,"FORGE":13,"FORGE_FROGLET":14,"FORGE_TEMPORAL":15,"import":16,"OPEN":17,"qual_name":18,"import_option0":19,"import_option1":20,"FILE_PATH":21,"import_option2":22,"option":23,"OPTION":24,"option_group0":25,"paragraphs":26,"sig_decl":27,"dummy":28,"pred_decl":29,"fun_decl":30,"assert_decl":31,"cmd_decl":32,"test_expect_decl":33,"sexpr_decl":34,"query_decl":35,"eval_rel_decl":36,"option_decl":37,"inst_decl":38,"example_decl":39,"property_decl":40,"quantified_property_decl":41,"test_suite_decl":42,"sig_decl_option0":43,"sig_decl_option1":44,"sig_decl_option2":45,"SIG":46,"name_list":47,"sig_decl_option3":48,"{":49,"sig_decl_option4":50,"}":51,"sig_ext":52,"EXTENDS":53,"IN":54,"sig_ext_repetition0":55,"field_list":56,"field":57,",":58,"field_option0":59,":":60,"relation_mult":61,"relation_expr":62,"mult":63,"LONE":64,"SOME":65,"ONE":66,"TWO":67,"SET":68,"PFUNC":69,"FUNC":70,"->":71,"IDEN":72,"qual_name_repetition0":73,"qual_namelist":74,"qual_namelist_repetition0":75,"PRED":76,"pred_decl_option0":77,"block":78,"FUN":79,"fun_decl_option0":80,"fun_decl_option1":81,"expr":82,"para_decls":83,"(":84,"para_decls_option0":85,")":86,"[":87,"para_decls_option1":88,"]":89,"para_decl_list":90,"para_decl":91,"para_decl_option0":92,"para_decl_option1":93,"helper_mult":94,"ASSERT":95,"assert_decl_option0":96,"cmd_decl_option0":97,"cmd_decl_group0":98,"cmd_decl_option1":99,"cmd_decl_option2":100,"cmd_decl_option3":101,"test_decl":102,"test_decl_option0":103,"test_decl_group0":104,"test_decl_option1":105,"test_decl_option2":106,"IS":107,"test_decl_group1":108,"test_expect_decl_option0":109,"EXPECT":110,"test_expect_decl_option1":111,"test_block":112,"test_block_repetition0":113,"scope":114,"FOR":115,"NUMBER":116,"scope_option0":117,"typescope_list":118,"typescope":119,"typescope_option0":120,"property_decl_group0":121,"property_decl_option0":122,"property_decl_option1":123,"TEST":124,"SUITE":125,"test_suite_decl_repetition0":126,"test_construct":127,"expr_list":128,"prefix_expr":129,"infix_expr":130,"postfix_expr":131,"basic_expr":132,"prefix_operator":133,"infix_operator":134,"Expr":135,"postfix_operator":136,"NOT":137,"ALWAYS":138,"EVENTUALLY":139,"AFTER":140,"BEFORE":141,"ONCE":142,"HISTORICALLY":143,"BACKTICK":144,"PRIME":145,"TILDE":146,"CARET":147,"STAR":148,"OR":149,"AND":150,"IFF":151,"IMPLIES":152,"XOR":153,"UNTIL":154,"RELEASE":155,"SINCE":156,"TRIGGERED":157,"PLUS":158,"MINUS":159,"AMPERSAND":160,".":161,"const":162,"block_repetition0":163,"NONE":164,"UNIV":165,"const_option0":166,"AS":167,"option_group0_option0":168,"-":169,"INT":170,"VAR":171,"ABSTRACT":172,"+":173,"DISJ":174,"RUN":175,"CHECK":176,"cmd_decl_option1_group0":177,"bounds":178,"SAT":179,"UNSAT":180,"UNKNOWN":181,"THEOREM":182,"FORGE_ERROR":183,"BUT":184,"EXACTLY":185,"SUFFICIENT":186,"NECESSARY":187,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"LANG",13:"FORGE",14:"FORGE_FROGLET",15:"FORGE_TEMPORAL",17:"OPEN",21:"FILE_PATH",24:"OPTION",34:"sexpr_decl",35:"query_decl",36:"eval_rel_decl",37:"option_decl",38:"inst_decl",46:"SIG",49:"{",51:"}",53:"EXTENDS",54:"IN",58:",",60:":",64:"LONE",65:"SOME",66:"ONE",67:"TWO",68:"SET",69:"PFUNC",70:"FUNC",71:"->",72:"IDEN",76:"PRED",79:"FUN",84:"(",86:")",87:"[",89:"]",95:"ASSERT",107:"IS",110:"EXPECT",115:"FOR",116:"NUMBER",118:"typescope_list",124:"TEST",125:"SUITE",135:"Expr",137:"NOT",138:"ALWAYS",139:"EVENTUALLY",140:"AFTER",141:"BEFORE",142:"ONCE",143:"HISTORICALLY",144:"BACKTICK",145:"PRIME",146:"TILDE",147:"CARET",148:"STAR",149:"OR",150:"AND",151:"IFF",152:"IMPLIES",153:"XOR",154:"UNTIL",155:"RELEASE",156:"SINCE",157:"TRIGGERED",158:"PLUS",159:"MINUS",160:"AMPERSAND",161:".",164:"NONE",165:"UNIV",167:"AS",169:"-",170:"INT",171:"VAR",172:"ABSTRACT",173:"+",174:"DISJ",175:"RUN",176:"CHECK",178:"bounds",179:"SAT",180:"UNSAT",181:"UNKNOWN",182:"THEOREM",183:"FORGE_ERROR",184:"BUT",185:"EXACTLY",186:"SUFFICIENT",187:"NECESSARY"},
productions_: [0,[3,2],[3,2],[6,0],[4,4],[7,2],[12,1],[12,1],[12,1],[16,4],[16,3],[23,3],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[27,9],[52,2],[52,3],[56,1],[56,3],[57,5],[63,1],[63,1],[63,1],[63,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[62,1],[62,3],[47,1],[47,3],[18,2],[74,2],[29,4],[30,7],[83,3],[83,3],[90,1],[90,3],[91,5],[94,1],[94,1],[94,1],[94,1],[94,1],[31,3],[32,5],[102,6],[33,4],[112,3],[114,3],[114,2],[119,3],[40,8],[42,7],[127,1],[127,1],[127,1],[127,1],[39,0],[41,0],[128,1],[128,3],[82,1],[82,1],[82,1],[82,1],[129,2],[130,3],[131,2],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[136,3],[132,1],[132,1],[132,1],[132,3],[78,3],[162,1],[162,1],[162,1],[162,2],[8,0],[8,2],[9,0],[9,2],[10,0],[10,2],[19,0],[19,3],[20,0],[20,2],[22,0],[22,2],[168,0],[168,1],[25,1],[25,1],[25,2],[43,0],[43,1],[44,0],[44,1],[45,0],[45,1],[48,0],[48,1],[50,0],[50,1],[55,0],[55,3],[59,0],[59,1],[73,0],[73,3],[75,0],[75,3],[77,0],[77,1],[80,0],[80,1],[81,0],[81,1],[85,0],[85,1],[88,0],[88,1],[92,0],[92,1],[93,0],[93,1],[96,0],[96,1],[97,0],[97,2],[98,1],[98,1],[177,1],[177,1],[99,0],[99,1],[100,0],[100,1],[101,0],[101,2],[103,0],[103,2],[104,1],[104,1],[105,0],[105,1],[106,0],[106,2],[108,1],[108,1],[108,1],[108,1],[108,1],[109,0],[109,1],[111,0],[111,1],[113,0],[113,2],[117,0],[117,2],[120,0],[120,1],[121,1],[121,1],[122,0],[122,1],[123,0],[123,2],[126,0],[126,2],[163,0],[163,2],[166,0],[166,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 console.log("Valid forge module declaration with imports:", $$[$0-3], $$[$0-2], $$[$0-1]); return { module: $$[$0-3], imports: $$[$0-2], options: $$[$0-1] }; 
break;
case 5:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = 'forge'; 
break;
case 7:
 this.$ = 'forge/bsl'; 
break;
case 8:
 this.$ = 'forge/temporal'; 
break;
case 11:
 this.$ = { type: 'option', key: $$[$0-1], value: $$[$0] }; 
break;
case 27:
 this.$ = { type: 'sig', name: $$[$0-5], ext: $$[$0-4], fields: $$[$0-2], constraints: $$[$0] }; 
break;
case 47:
 this.$ = $$[$0-1] + ($$[$0] ? $$[$0].join('') : ''); 
break;
case 48:
 this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 49:
 this.$ = { type: 'predicate', name: $$[$0-2], parameters: $$[$0-1], body: $$[$0] }; 
break;
case 50:
 this.$ = { type: 'function', name: $$[$0-5], parameters: $$[$0-4], return_type: $$[$0-2], body: $$[$0-1] }; 
break;
case 61:
 this.$ = { type: 'assertion', name: $$[$0-1], body: $$[$0] }; 
break;
case 62:
 this.$ = { type: 'command', name: $$[$0-4], action: $$[$0-2], scope: $$[$0], bounds: $$[$02] }; 
break;
case 63:
 this.$ = { type: 'test', name: $$[$0-5], body: $$[$0-3], scope: $$[$0-2], bounds: $$[$0], result: $$[$02] }; 
break;
case 64:
 this.$ = { type: 'test_expect', name: $$[$0-1], body: $$[$0] }; 
break;
case 65:
 this.$ = $$[$0-1]; 
break;
case 69:
 this.$ = { type: 'property', name: $$[$0-6], condition: $$[$0-4], subject: $$[$0-2], scope: $$[$0-1], bounds: $$[$01] }; 
break;
case 70:
 this.$ = { type: 'test_suite', name: $$[$0-3], body: $$[$0-1] }; 
break;
case 122: case 124: case 126: case 149: case 153: case 155: case 202: case 214: case 216:
this.$ = [];
break;
case 123: case 125: case 127: case 203: case 215: case 217:
$$[$0-1].push($$[$0]);
break;
case 150: case 154: case 156:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,11:[1,5]},{1:[3]},{5:[1,6]},{5:[1,7]},o($V0,[2,122],{8:8}),{12:9,13:[1,10],14:[1,11],15:[1,12]},{1:[2,1]},{1:[2,2]},o($V1,[2,124],{9:13,16:14,17:[1,15]}),o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,7]),o($V0,[2,8]),o($V2,[2,126],{10:16,23:17,24:[1,18]}),o($V0,[2,123]),{18:19,21:[1,20],72:$V3},o($V4,[2,139],{26:22,27:23,43:24,5:[2,4],171:[1,25]}),o($V1,[2,125]),{18:26,72:$V3},o($V5,[2,128],{19:27,87:[1,28]}),o($V0,[2,132],{22:29,167:[1,30]}),o($V6,[2,153],{73:31}),o($V2,[2,127]),o($V2,[2,12]),o($V7,[2,141],{44:32,172:[1,33]}),o($V4,[2,140]),{18:35,21:[1,36],25:34,72:$V3,168:37,169:[1,38],170:[2,134]},o($V0,[2,130],{20:39,167:[1,40]}),{18:42,72:$V3,74:41},o($V0,[2,10]),{72:[1,43]},o([5,17,21,24,46,49,51,58,64,65,66,67,71,72,87,89,167,169,170,171,172,173],[2,47],{161:[1,44]}),{45:45,46:[2,143],63:46,64:[1,47],65:[1,48],66:[1,49],67:[1,50]},o($V7,[2,142]),o($V1,[2,11]),o($V1,[2,136]),o($V1,[2,137]),{170:[1,51]},{170:[2,135]},o($V0,[2,9]),{72:[1,52]},{89:[1,53]},o($V8,[2,155],{75:54}),o($V0,[2,133]),{72:[1,55]},{46:[1,56]},{46:[2,144]},{46:[2,33]},{46:[2,34]},{46:[2,35]},{46:[2,36]},o($V1,[2,138]),o($V0,[2,131]),o($V5,[2,129]),{58:[1,57],89:[2,48]},o($V6,[2,154]),{47:58,72:$V9},{18:60,72:$V3},{48:61,49:[2,145],52:62,53:[1,63],54:[1,64]},o($Va,[2,45],{58:[1,65]}),o($V8,[2,156]),{49:[1,66]},{49:[2,146]},{18:67,72:$V3},{18:68,72:$V3},{47:69,72:$V9},o([51,72],[2,147],{50:70,56:71,57:72,59:73,171:$Vb}),{49:[2,28]},o($Vc,[2,149],{55:75}),o($Va,[2,46]),{51:[1,76]},{51:[2,148]},{51:[2,30],58:[1,77]},{47:78,72:$V9},{72:[2,152]},{49:[2,29],173:[1,79]},o($V2,[2,27]),{56:80,57:72,59:73,72:[2,151],171:$Vb},{60:[1,81]},{18:82,72:$V3},{51:[2,31]},{61:83,64:[1,84],66:[1,86],67:[1,87],68:[1,85],69:[1,88],70:[1,89]},o($Vc,[2,150]),{18:91,62:90,72:$V3},{72:[2,37]},{72:[2,38]},{72:[2,39]},{72:[2,40]},{72:[2,41]},{72:[2,42]},o($Vd,[2,32]),o($Vd,[2,43],{71:[1,92]}),{18:91,62:93,72:$V3},o($Vd,[2,44])],
defaultActions: {6:[2,1],7:[2,2],38:[2,135],46:[2,144],47:[2,33],48:[2,34],49:[2,35],50:[2,36],62:[2,146],67:[2,28],71:[2,148],74:[2,152],80:[2,31],84:[2,37],85:[2,38],86:[2,39],87:[2,40],88:[2,41],89:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* Definitions and imports go here */
const yy = {};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
/* Definitions and imports go here */

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore whitespace */
break;
case 1:/* Ignore newlines */
break;
case 2:return 11;
break;
case 3:return 15;
break;
case 4:return 14;
break;
case 5:return 13;
break;
case 6:/* Ignore comment */
break;
case 7:/* Ignore comment */
break;
case 8:/* Ignore comment */
break;
case 9: /* Ignore multiline comments */ 
break;
case 10:return 17;
break;
case 11:return 167;
break;
case 12:return 24;
break;
case 13:return 46;
break;
case 14:return 172;
break;
case 15:return 53;
break;
case 16:return 171;
break;
case 17:return 54;
break;
case 18:return 64;
break;
case 19:return 66;
break;
case 20:return 68;
break;
case 21:return 69;
break;
case 22:return 70;
break;
case 23:return 174;
break;
case 24:return 150;
break;
case 25:return 149;
break;
case 26:return 153;
break;
case 27:return 152;
break;
case 28:return 152;
break;
case 29:return 151;
break;
case 30:return 151;
break;
case 31:return 154;
break;
case 32:return 155;
break;
case 33:return 156;
break;
case 34:return 157; /* WHAT IS THIS? */
break;
case 35:return 160;
break;
case 36:return 144;
break;
case 37:return 158;
break;
case 38:return 159;
break;
case 39:return 148;
break;
case 40:return 145;
break;
case 41:return 146;
break;
case 42:return 147;
break;
case 43:return 'ALL';
break;
case 44:return 65;
break;
case 45:return 'NO';
break;
case 46:return 164;
break;
case 47:return 137;
break;
case 48:return 138;
break;
case 49:return 139;
break;
case 50:return 140;
break;
case 51:return 141;
break;
case 52:return 142;
break;
case 53:return 143;
break;
case 54:return 95;
break;
case 55:return 176;
break;
case 56:return 175;
break;
case 57:return 110;
break;
case 58:return 124;
break;
case 59:return 107;
break;
case 60:return 179;
break;
case 61:return 180;
break;
case 62:return 181;
break;
case 63:return 182;
break;
case 64:return 183;
break;
case 65:return 186;
break;
case 66:return 187;
break;
case 67:return 125;
break;
case 68:return 115;
break;
case 69:return 184;
break;
case 70:return 185;
break;
case 71:return 'EQUALS';
break;
case 72:return 'NOT_EQUALS';
break;
case 73:return 'LESS_THAN';
break;
case 74:return 'LEQ';
break;
case 75:return 'GREATER_THAN';
break;
case 76:return 'GEQ';
break;
case 77:return 87;
break;
case 78:return 89;
break;
case 79:return 49;
break;
case 80:return 51;
break;
case 81:return 84;
break;
case 82:return 86;
break;
case 83:return 161;
break;
case 84:return 58;
break;
case 85:return 60;
break;
case 86:return 71;
break;
case 87:return 72;
break;
case 88:return 170;
break;
case 89:return 21;
break;
case 90: console.log('Unmatched text: ' + yy_.yytext); 
break;
case 91:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\n]+)/,/^(?:#lang\b)/,/^(?:forge\/temporal\b)/,/^(?:forge\/bsl\b)/,/^(?:forge\b)/,/^(?:--.*)/,/^(?:\/\/.*)/,/^(?:\/\\\*.*\\\*\/)/,/^(?:\/\\\*\[\^\*\]\*\\\*\+\(\?:\[\^\/\*\]\[\^\*\]\*\\\*\+\)\*\/)/,/^(?:open\b)/,/^(?:as\b)/,/^(?:option\b)/,/^(?:sig\b)/,/^(?:abstract\b)/,/^(?:extends\b)/,/^(?:var\b)/,/^(?:in\b)/,/^(?:lone\b)/,/^(?:one\b)/,/^(?:set\b)/,/^(?:pfunc\b)/,/^(?:func\b)/,/^(?:disj\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:xor\b)/,/^(?:implies\b)/,/^(?:=>)/,/^(?:iff\b)/,/^(?:<=>)/,/^(?:until\b)/,/^(?:release\b)/,/^(?:since\b)/,/^(?:triggered\b)/,/^(?:&)/,/^(?:`)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:')/,/^(?:~)/,/^(?:\^)/,/^(?:all\b)/,/^(?:some\b)/,/^(?:no\b)/,/^(?:none\b)/,/^(?:not\b)/,/^(?:always\b)/,/^(?:eventually\b)/,/^(?:after\b)/,/^(?:before\b)/,/^(?:once\b)/,/^(?:historically\b)/,/^(?:assert\b)/,/^(?:check\b)/,/^(?:run\b)/,/^(?:expect\b)/,/^(?:test\b)/,/^(?:is\b)/,/^(?:sat\b)/,/^(?:unsat\b)/,/^(?:unknown\b)/,/^(?:theorem\b)/,/^(?:forge_error\b)/,/^(?:sufficient\b)/,/^(?:necessary\b)/,/^(?:suite\b)/,/^(?:for\b)/,/^(?:but\b)/,/^(?:exactly\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:->)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = forge;
exports.Parser = forge.Parser;
exports.parse = function () { return forge.parse.apply(forge, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}