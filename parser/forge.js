/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var forge = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,18,28,38,44,45,46,47,49,50,66],$V1=[5,28,38,44,45,46,47,49,50,66],$V2=[5,38,44,45,46,47,49,50,66],$V3=[1,24],$V4=[38,44,45,46,47],$V5=[5,18,24,28,38,44,45,46,47,49,50,66],$V6=[1,37],$V7=[1,62],$V8=[1,70],$V9=[1,71],$Va=[1,78],$Vb=[1,77],$Vc=[1,75],$Vd=[1,74],$Ve=[1,76],$Vf=[42,60,72,81],$Vg=[1,98],$Vh=[1,96],$Vi=[60,72],$Vj=[42,60],$Vk=[1,111],$Vl=[57,60],$Vm=[1,123],$Vn=[1,122],$Vo=[1,120],$Vp=[1,121],$Vq=[1,124],$Vr=[1,125];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"forge_specification":3,"forge_module":4,"EOF":5,"eval_module":6,"lang_declaration":7,"imports":8,"options":9,"paragraphs":10,"LANG":11,"forge_lang":12,"FORGE":13,"FORGE_FROGLET":14,"FORGE_TEMPORAL":15,"imports_repetition0":16,"import_statement":17,"OPEN":18,"import_file":19,"import_statement_option0":20,"FILEPATH":21,"qualified_name":22,"import_as":23,"AS":24,"IDEN":25,"options_repetition0":26,"option_statement":27,"OPTION":28,"option_value":29,"NUMBER":30,"-":31,"paragraphs_repetition0":32,"paragraph":33,"sig_decl":34,"pred_decl":35,"sig_decl_option0":36,"sig_decl_option1":37,"SIG":38,"sig_decl_option2":39,"{":40,"sig_decl_option3":41,"}":42,"sig_multiplicity":43,"TWO":44,"ONE":45,"LONE":46,"SOME":47,"sig_modifiers":48,"VAR":49,"ABSTRACT":50,"sig_ext":51,"EXTENDS":52,"field_decls":53,"field_decl":54,"field_decls_repetition0":55,"name_list":56,":":57,"relation_mult":58,"relation_expr":59,",":60,"SET":61,"FUNC":62,"PFUNC":63,"->":64,".":65,"PRED":66,"pred_decl_option0":67,"block":68,"param_decls":69,"[":70,"param_decl":71,"]":72,"param_decls_repetition_plus0":73,"expr":74,"quantified_expr":75,"atom":76,"quantifier":77,"var_decls":78,"quantified_expr_option0":79,"quantified_expr_body":80,"|":81,"ALL":82,"NO":83,"binary_expr":84,"AND":85,"OR":86,"IMPLIES":87,"IFF":88,"+":89,"*":90,"/":91,"=":92,"!=":93,"IN":94,"NOT":95,"<":96,">":97,"<=":98,">=":99,"unary_expr":100,"~":101,"^":102,"function_call":103,"expr_list":104,"expr_list_repetition0":105,"assert_decl":106,"ASSERT":107,"assert_decl_option0":108,"cmd_decl":109,"cmd_decl_group0":110,"cmd_decl_group1":111,"cmd_decl_option0":112,"test_decl":113,"TEST":114,"EXPECT":115,"test_decl_option0":116,"test_decl_repetition0":117,"test_case":118,"test_case_group0":119,"test_case_option0":120,"IS":121,"test_case_group1":122,"example_decl":123,"EXAMPLE":124,"FOR":125,"bounds":126,"property_decl":127,"property_decl_group0":128,"property_decl_option0":129,"property_decl_option1":130,"scope":131,"scope_option0":132,"typescope_list":133,"typescope":134,"typescope_list_repetition0":135,"bounds_repetition0":136,"bound_statement":137,"RUN":138,"CHECK":139,"SAT":140,"UNSAT":141,"UNKNOWN":142,"THEOREM":143,"FORGE_ERROR":144,"SUFFICIENT":145,"NECESSARY":146,"BUT":147,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"LANG",13:"FORGE",14:"FORGE_FROGLET",15:"FORGE_TEMPORAL",18:"OPEN",21:"FILEPATH",24:"AS",25:"IDEN",28:"OPTION",30:"NUMBER",31:"-",38:"SIG",40:"{",42:"}",44:"TWO",45:"ONE",46:"LONE",47:"SOME",49:"VAR",50:"ABSTRACT",52:"EXTENDS",57:":",60:",",61:"SET",62:"FUNC",63:"PFUNC",64:"->",65:".",66:"PRED",70:"[",72:"]",81:"|",82:"ALL",83:"NO",85:"AND",86:"OR",87:"IMPLIES",88:"IFF",89:"+",90:"*",91:"/",92:"=",93:"!=",94:"IN",95:"NOT",96:"<",97:">",98:"<=",99:">=",101:"~",102:"^",107:"ASSERT",114:"TEST",115:"EXPECT",121:"IS",124:"EXAMPLE",125:"FOR",138:"RUN",139:"CHECK",140:"SAT",141:"UNSAT",142:"UNKNOWN",143:"THEOREM",144:"FORGE_ERROR",145:"SUFFICIENT",146:"NECESSARY",147:"BUT"},
productions_: [0,[3,2],[3,1],[6,0],[4,4],[7,2],[12,1],[12,1],[12,1],[8,1],[17,3],[19,1],[19,1],[23,2],[9,1],[27,3],[29,1],[29,1],[29,2],[10,1],[33,1],[33,1],[34,8],[43,1],[43,1],[43,1],[43,1],[48,1],[48,1],[48,2],[48,2],[51,2],[53,2],[54,5],[54,4],[56,1],[56,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[59,1],[59,3],[22,1],[22,3],[35,4],[69,3],[69,4],[71,3],[74,1],[74,1],[75,3],[80,2],[77,1],[77,1],[77,1],[77,1],[77,1],[78,1],[78,3],[78,5],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,4],[84,3],[84,3],[84,3],[84,3],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[76,1],[76,1],[76,1],[76,1],[103,4],[104,2],[106,3],[109,3],[113,6],[118,6],[123,6],[127,8],[131,3],[131,2],[133,2],[134,2],[126,3],[137,3],[68,3],[16,0],[16,2],[20,0],[20,1],[26,0],[26,2],[32,0],[32,2],[36,0],[36,1],[37,0],[37,1],[39,0],[39,1],[41,0],[41,1],[55,0],[55,3],[67,0],[67,1],[73,2],[73,3],[79,0],[79,1],[105,0],[105,3],[108,0],[108,1],[110,1],[110,1],[111,1],[111,1],[112,0],[112,1],[116,0],[116,1],[117,0],[117,2],[119,1],[119,1],[120,0],[120,1],[122,1],[122,1],[122,1],[122,1],[122,1],[128,1],[128,1],[129,0],[129,1],[130,0],[130,2],[132,0],[132,2],[135,0],[135,3],[136,0],[136,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 4:
 this.$ = parserActions.createForgeModule($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], this._$); 
break;
case 5: case 9: case 13: case 14: case 19: case 26: case 31: case 42:
 this.$ = $$[$0]; 
break;
case 10:
 this.$ = parserActions.createImportStatement($$[$0-1], $$[$0], this._$); 
break;
case 15:
 this.$ = parserActions.createOptionStatement($$[$0-1], $$[$0]); 
break;
case 18:
 this.$ = -$$[$0]; 
break;
case 22:
 this.$ = parserActions.createSigDecl($$[$0-7] || [], $$[$0-6] || [], parserActions.createIdentifier($$[$0-4], _$[$0-4]), $$[$0-3], $$[$0-1]); 
break;
case 27:
 this.$ = ['var']; 
break;
case 28:
 this.$ = ['abstract']; 
break;
case 29:
 this.$ = ['var', 'abstract']; 
break;
case 30:
 this.$ = ['abstract', 'var']; 
break;
case 32:
 this.$ = [$$[$0-1]].concat($$[$0].map(d => d[1])); 
break;
case 33:
 this.$ = parserActions.createFieldDecl(true, $$[$0-3], $$[$0-1], $$[$0], this._$); 
break;
case 34:
 this.$ = parserActions.createFieldDecl(false, $$[$0-3], $$[$0-1], $$[$0], this._$); 
break;
case 35: case 60:
 this.$ = [parserActions.createIdentifier($$[$0], this._$)]; 
break;
case 36:
 this.$ = $$[$0-2].concat([parserActions.createIdentifier($$[$0], this._$)]); 
break;
case 44:
 this.$ = parserActions.createExpr('->', {left: $$[$0-2], right: $$[$0]}, this._$); 
break;
case 45:
 this.$ = parserActions.createQualifiedName([parserActions.createIdentifier($$[$0], this._$)], this._$); 
break;
case 46:
 this.$ = parserActions.createQualifiedName($$[$0-2].parts.concat([parserActions.createIdentifier($$[$0], this._$)]), this._$); 
break;
case 47:
 this.$ = parserActions.createPredDecl(parserActions.createIdentifier($$[$0-2], _$[$0-2]), $$[$0-1] || [], $$[$0], this._$); 
break;
case 48:
 this.$ = [$$[$0-1]]; 
break;
case 49:
 this.$ = [$$[$0-2]].concat($$[$0-1].map(p => p[1])); 
break;
case 50:
 this.$ = parserActions.createParamDecl($$[$0-2], $$[$0], this._$); 
break;
case 61:
 this.$ = [{ name: parserActions.createIdentifier($$[$0-2], this._$), type: $$[$0] }]; 
break;
case 62:
 this.$ = $$[$0-4].concat([{ name: parserActions.createIdentifier($$[$0-2], this._$), type: $$[$0] }]); 
break;
case 103:
 this.$ = $$[$0-1]; 
break;
case 104:
 this.$ = { type: $$[$0-2], value: $$[$0] }; 
break;
case 106: case 110: case 112: case 122: case 130: case 142: case 161: case 163:
this.$ = [];
break;
case 107: case 111: case 113: case 143: case 164:
$$[$0-1].push($$[$0]);
break;
case 123: case 127: case 131: case 162:
$$[$0-2].push($$[$0-1]);
break;
case 126:
this.$ = [$$[$0-1]];
break;
}
},
table: [{3:1,4:2,5:[1,3],7:4,11:[1,5]},{1:[3]},{5:[1,6]},{1:[2,2]},o($V0,[2,106],{8:7,16:8}),{12:9,13:[1,10],14:[1,11],15:[1,12]},{1:[2,1]},o($V1,[2,110],{9:13,26:14}),o($V1,[2,9],{17:15,18:[1,16]}),o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,7]),o($V0,[2,8]),o($V2,[2,112],{10:17,32:18}),o($V2,[2,14],{27:19,28:[1,20]}),o($V0,[2,107]),{19:21,21:[1,22],22:23,25:$V3},{5:[2,4]},o($V4,[2,114],{33:25,34:26,35:27,36:28,48:30,5:[2,19],49:[1,31],50:[1,32],66:[1,29]}),o($V1,[2,111]),{22:33,25:$V3},o($V0,[2,108],{20:34,23:35,24:[1,36]}),o($V5,[2,11]),o($V5,[2,12],{65:$V6}),o([5,18,24,25,28,30,31,38,40,42,44,45,46,47,49,50,60,64,65,66],[2,45]),o($V2,[2,113]),o($V2,[2,20]),o($V2,[2,21]),{37:38,38:[2,116],43:39,44:[1,40],45:[1,41],46:[1,42],47:[1,43]},{25:[1,44]},o($V4,[2,115]),o($V4,[2,27],{50:[1,45]}),o($V4,[2,28],{49:[1,46]}),{22:48,25:$V3,29:47,30:[1,49],31:[1,50],65:$V6},o($V0,[2,10]),o($V0,[2,109]),{25:[1,51]},{25:[1,52]},{38:[1,53]},{38:[2,117]},{38:[2,23]},{38:[2,24]},{38:[2,25]},{38:[2,26]},{40:[2,124],67:54,69:55,70:[1,56]},o($V4,[2,29]),o($V4,[2,30]),o($V1,[2,15]),o($V1,[2,16],{65:$V6}),o($V1,[2,17]),{30:[1,57]},o($V0,[2,13]),o([5,18,24,25,28,30,31,38,40,42,44,45,46,47,49,50,60,64,65,66,70,72,81],[2,46]),{25:[1,58]},{40:[1,60],68:59},{40:[2,125]},{25:$V7,71:61},o($V1,[2,18]),{39:63,40:[2,118],51:64,52:[1,65]},o($V2,[2,47]),{22:72,25:$V8,30:$V9,45:$Va,46:$Vb,47:$Vc,74:66,75:67,76:68,77:69,82:$Vd,83:$Ve,103:73},{60:[1,81],72:[1,79],73:80},{57:[1,82]},{40:[1,83]},{40:[2,119]},{22:84,25:$V3},{42:[1,85]},o($Vf,[2,51]),o($Vf,[2,52]),{25:[1,87],78:86},o([42,60,65,70,72,81],[2,87]),o($Vf,[2,88]),o($Vf,[2,89],{65:$V6,70:[1,88]}),o($Vf,[2,90]),{25:[2,55]},{25:[2,56]},{25:[2,57]},{25:[2,58]},{25:[2,59]},{40:[2,48]},{60:[1,90],72:[1,89]},{25:$V7,71:91},{22:72,25:$V8,30:$V9,45:$Va,46:$Vb,47:$Vc,74:92,75:67,76:68,77:69,82:$Vd,83:$Ve,103:73},{25:$Vg,41:93,42:[2,120],49:$Vh,53:94,54:95,56:97},{40:[2,31],65:$V6},o($V2,[2,105]),o([42,72],[2,128],{79:99,80:101,60:[1,100],81:[1,102]}),o($Vf,[2,60],{57:[1,103]}),{22:72,25:$V8,30:$V9,45:$Va,46:$Vb,47:$Vc,74:105,75:67,76:68,77:69,82:$Vd,83:$Ve,103:73,104:104},{40:[2,49]},{25:$V7,71:106},o($Vi,[2,126]),o($Vi,[2,50]),{42:[1,107]},{42:[2,121]},o($Vj,[2,122],{55:108}),{25:$Vg,56:109},{57:[1,110],60:$Vk},o($Vl,[2,35]),o($Vf,[2,53]),{25:[1,112]},o($Vf,[2,129]),{22:72,25:$V8,30:$V9,45:$Va,46:$Vb,47:$Vc,74:113,75:67,76:68,77:69,82:$Vd,83:$Ve,103:73},{22:72,25:$V8,30:$V9,45:$Va,46:$Vb,47:$Vc,74:114,75:67,76:68,77:69,82:$Vd,83:$Ve,103:73},{72:[1,115]},o($Vi,[2,130],{105:116}),o($Vi,[2,127]),o($V2,[2,22]),{42:[2,32],60:[1,117]},{57:[1,118],60:$Vk},{44:$Vm,45:$Vn,46:$Vo,58:119,61:$Vp,62:$Vq,63:$Vr},{25:[1,126]},{57:[1,127]},o($Vf,[2,54]),o($Vf,[2,61]),o($Vf,[2,91]),{60:[1,128],72:[2,92]},{25:$Vg,49:$Vh,54:129,56:97},{44:$Vm,45:$Vn,46:$Vo,58:130,61:$Vp,62:$Vq,63:$Vr},{22:132,25:$V3,59:131},{25:[2,37]},{25:[2,38]},{25:[2,39]},{25:[2,40]},{25:[2,41]},{25:[2,42]},o($Vl,[2,36]),{22:72,25:$V8,30:$V9,45:$Va,46:$Vb,47:$Vc,74:133,75:67,76:68,77:69,82:$Vd,83:$Ve,103:73},{22:72,25:$V8,30:$V9,45:$Va,46:$Vb,47:$Vc,74:134,75:67,76:68,77:69,82:$Vd,83:$Ve,103:73},o($Vj,[2,123]),{22:132,25:$V3,59:135},o($Vj,[2,34]),o($Vj,[2,43],{64:[1,136],65:$V6}),o($Vf,[2,62]),o($Vi,[2,131]),o($Vj,[2,33]),{22:132,25:$V3,59:137},o($Vj,[2,44])],
defaultActions: {3:[2,2],6:[2,1],17:[2,4],39:[2,117],40:[2,23],41:[2,24],42:[2,25],43:[2,26],55:[2,125],64:[2,119],74:[2,55],75:[2,56],76:[2,57],77:[2,58],78:[2,59],79:[2,48],89:[2,49],94:[2,121],120:[2,37],121:[2,38],122:[2,39],123:[2,40],124:[2,41],125:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* Definitions and imports go here */

const yy = {};

const parserActions = {
    createIdentifier: function(name, location) {
        return {
            type: 'identifier',
            name: name,
            location: location
        };
    },

    createReference: function(identifier, location) {
        return {
            type: 'reference',
            name: identifier.name,
            location: location
        };
    },

    createSigDecl: function(modifiers, multiplicity, name, ext, fields, location) {
        return {
            type: 'sig_decl',
            name: name, 
            modifiers: modifiers,
            multiplicity: multiplicity,
            extends: ext,
            fields: fields,
            location: location
        };
    },

    createPredDecl: function(name, params, body, location) {
        return {
            type: 'pred_decl',
            name: name, 
            params: params,
            body: body,
            location: location
        };
    },

    createQualifiedName: function(parts, location) {
        return {
            type: 'qualified_name',
            name: parts.map(p => p.name).join('.'),
            parts: parts,
            location: location
        };
    },

    createFieldDecl: function(isVar, names, multiplicity, expr, location) {
        return {
            type: 'field_decl',
            isVar: isVar,
            names: names.map(n => n.name),
            multiplicity: multiplicity,
            expr: expr,
            location: location
        };
    },

    createForgeModule: function(langDecl, imports, options, paragraphs, location) {
        return {
            type: 'forge_module',
            langDeclaration: langDecl,
            imports: imports,
            options: options,
            paragraphs: paragraphs,
            location: location
        };
    },

    createImportStatement: function(file, alias, location) {
        return {
            type: 'import_statement',
            file: file,
            alias: alias,
            location: location
        };
    },

    createOptionStatement: function(name, value, location) {
        return {
            type: 'option_statement',
            name: name,
            value: value,
            location: location
        };
    },

    createExpr: function(type, args, location) {
        return {
            type: type,
            ...args,
            location: location
        };
    },

    createParamDecl: function(name, type, location) {
        return {
            type: 'param_decl',
            name: name,
            paramType: type,
            location: location
        };
    }
};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
/* Definitions and imports go here */

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore whitespace */
break;
case 1:/* Ignore newlines */
break;
case 2:/* Ignore comment */
break;
case 3:/* Ignore comment */
break;
case 4:/* Ignore comment */
break;
case 5: /* Ignore multiline comments  DOESNT WORK*/ 
break;
case 6:return 11;
break;
case 7:return 15;
break;
case 8:return 14;
break;
case 9:return 13;
break;
case 10:return 'EQUALS';
break;
case 11:return 'NOT_EQUALS';
break;
case 12:return 'LESS_THAN';
break;
case 13:return 'LEQ';
break;
case 14:return 'GREATER_THAN';
break;
case 15:return 'GEQ';
break;
case 16:return 18;
break;
case 17:return 24;
break;
case 18:return 28;
break;
case 19:return 38;
break;
case 20:return 50;
break;
case 21:return 52;
break;
case 22:return 49;
break;
case 23:return 94;
break;
case 24:return 46;
break;
case 25:return 45;
break;
case 26:return 61;
break;
case 27:return 63;
break;
case 28:return 62;
break;
case 29:return 'DISJ';
break;
case 30:return 66;
break;
case 31:return 85;
break;
case 32:return 86;
break;
case 33:return 'XOR';
break;
case 34:return 87;
break;
case 35:return 87;
break;
case 36:return 88;
break;
case 37:return 88;
break;
case 38:return 'UNTIL';
break;
case 39:return 'RELEASE';
break;
case 40:return 'SINCE';
break;
case 41:return 'TRIGGERED';
break;
case 42:return 'AMPERSAND';
break;
case 43:return 'BACKTICK';
break;
case 44:return 64;
break;
case 45:return 81;
break;
case 46:return 'PLUS';
break;
case 47:return 'MINUS';
break;
case 48:return 'STAR';
break;
case 49:return 'PRIME';
break;
case 50:return 'TILDE';
break;
case 51:return 'CARET';
break;
case 52:return 82;
break;
case 53:return 47;
break;
case 54:return 83;
break;
case 55:return 'NONE';
break;
case 56:return 95;
break;
case 57:return 'ALWAYS';
break;
case 58:return 'EVENTUALLY';
break;
case 59:return 'AFTER';
break;
case 60:return 'BEFORE';
break;
case 61:return 'ONCE';
break;
case 62:return 'HISTORICALLY';
break;
case 63:return 107;
break;
case 64:return 139;
break;
case 65:return 138;
break;
case 66:return 115;
break;
case 67:return 114;
break;
case 68:return 121;
break;
case 69:return 140;
break;
case 70:return 141;
break;
case 71:return 142;
break;
case 72:return 143;
break;
case 73:return 144;
break;
case 74:return 145;
break;
case 75:return 146;
break;
case 76:return 'SUITE';
break;
case 77:return 125;
break;
case 78:return 147;
break;
case 79:return 'EXACTLY';
break;
case 80:return 70;
break;
case 81:return 72;
break;
case 82:return 40;
break;
case 83:return 42;
break;
case 84:return '(';
break;
case 85:return ')';
break;
case 86:return 65;
break;
case 87:return 60;
break;
case 88:return 57;
break;
case 89:return 30;
break;
case 90:return 25;
break;
case 91:return 'FILE_PATH';
break;
case 92: console.log('Unmatched text: ' + yy_.yytext); 
break;
case 93:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\n]+)/,/^(?:--.*)/,/^(?:\/\/.*)/,/^(?:\/\\\*.*\\\*\/)/,/^(?:\/\\\*\[\^\*\]\*\\\*\+\(\?:\[\^\/\*\]\[\^\*\]\*\\\*\+\)\*\/)/,/^(?:#lang\b)/,/^(?:forge\/temporal\b)/,/^(?:forge\/bsl\b)/,/^(?:forge\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:open\b)/,/^(?:as\b)/,/^(?:option\b)/,/^(?:sig\b)/,/^(?:abstract\b)/,/^(?:extends\b)/,/^(?:var\b)/,/^(?:in\b)/,/^(?:lone\b)/,/^(?:one\b)/,/^(?:set\b)/,/^(?:pfunc\b)/,/^(?:func\b)/,/^(?:disj\b)/,/^(?:pred\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:xor\b)/,/^(?:implies\b)/,/^(?:=>)/,/^(?:iff\b)/,/^(?:<=>)/,/^(?:until\b)/,/^(?:release\b)/,/^(?:since\b)/,/^(?:triggered\b)/,/^(?:&)/,/^(?:`)/,/^(?:->)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:')/,/^(?:~)/,/^(?:\^)/,/^(?:all\b)/,/^(?:some\b)/,/^(?:no\b)/,/^(?:none\b)/,/^(?:not\b)/,/^(?:always\b)/,/^(?:eventually\b)/,/^(?:after\b)/,/^(?:before\b)/,/^(?:once\b)/,/^(?:historically\b)/,/^(?:assert\b)/,/^(?:check\b)/,/^(?:run\b)/,/^(?:expect\b)/,/^(?:test\b)/,/^(?:is\b)/,/^(?:sat\b)/,/^(?:unsat\b)/,/^(?:unknown\b)/,/^(?:theorem\b)/,/^(?:forge_error\b)/,/^(?:sufficient\b)/,/^(?:necessary\b)/,/^(?:suite\b)/,/^(?:for\b)/,/^(?:but\b)/,/^(?:exactly\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z0-9_]+)/,/^(?:"[^\"]*")/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = forge;
exports.Parser = forge.Parser;
exports.parse = function () { return forge.parse.apply(forge, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}