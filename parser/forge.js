/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var forge = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,18,27,43,49,50,51,52,54,55,71],$V1=[5,27,43,49,50,51,52,54,55,71],$V2=[5,43,49,50,51,52,54,55,71],$V3=[43,49,50,51,52],$V4=[1,57],$V5=[1,59],$V6=[24,29,30,45,47,49,50,51,52,66,93,105,109,114,115,123,133,140,141,142,143,144,145,146,147,148],$V7=[65,78],$V8=[1,80],$V9=[1,78],$Va=[1,79],$Vb=[1,100],$Vc=[1,99],$Vd=[1,98],$Ve=[1,97],$Vf=[1,101],$Vg=[1,76],$Vh=[1,83],$Vi=[1,85],$Vj=[1,81],$Vk=[1,82],$Vl=[1,96],$Vm=[1,86],$Vn=[1,87],$Vo=[1,88],$Vp=[1,89],$Vq=[1,90],$Vr=[1,91],$Vs=[1,92],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,110],$Vx=[1,108],$Vy=[1,111],$Vz=[1,112],$VA=[1,113],$VB=[1,114],$VC=[1,115],$VD=[24,29,30,45,47,49,50,51,52,65,66,78,93,94,95,96,97,98,99,100,105,109,114,115,120,123,133,140,141,142,143,144,145,146,147,148],$VE=[1,127],$VF=[24,29,30,45,49,50,51,52,66,93,105,109,114,115,123,133,140,141,142,143,144,145,146,147,148],$VG=[47,65],$VH=[1,133],$VI=[62,65],$VJ=[1,145],$VK=[24,29,30,45,47,49,50,51,52,65,66,78,93,94,100,105,109,114,115,120,123,133,140,141,142,143,144,145,146,147,148],$VL=[1,149],$VM=[45,65,120],$VN=[1,158],$VO=[1,157],$VP=[1,155],$VQ=[1,156],$VR=[1,159],$VS=[1,160],$VT=[24,29,30,45,47,49,50,51,52,65,66,78,93,94,95,96,97,98,100,105,109,114,115,120,123,133,140,141,142,143,144,145,146,147,148],$VU=[24,29,30,45,47,49,50,51,52,65,66,78,93,94,95,96,97,98,99,100,105,109,113,114,115,120,123,133,140,141,142,143,144,145,146,147,148],$VV=[45,120],$VW=[1,174];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"forge_specification":3,"forge_module":4,"EOF":5,"eval_module":6,"lang_declaration":7,"imports":8,"options":9,"paragraphs":10,"LANG":11,"forge_lang":12,"FORGE":13,"FORGE_FROGLET":14,"FORGE_TEMPORAL":15,"imports_repetition0":16,"import_statement":17,"OPEN":18,"import_file":19,"import_statement_option0":20,"FILEPATH":21,"import_as":22,"AS":23,"IDEN":24,"options_repetition0":25,"option_statement":26,"OPTION":27,"option_value":28,"NUMBER":29,"-":30,"paragraphs_repetition0":31,"paragraph":32,"sig_decl":33,"pred_decl":34,"dummy":35,"assert_decl":36,"cmd_decl":37,"test_decl":38,"expect_decl":39,"inst_decl":40,"sig_decl_option0":41,"sig_decl_option1":42,"SIG":43,"sig_decl_option2":44,"{":45,"sig_decl_option3":46,"}":47,"sig_multiplicity":48,"TWO":49,"ONE":50,"LONE":51,"SOME":52,"sig_modifiers":53,"VAR":54,"ABSTRACT":55,"sig_ext":56,"EXTENDS":57,"field_decls":58,"field_decl":59,"field_decls_repetition0":60,"name_list":61,":":62,"relation_mult":63,"relation_expr":64,",":65,"SET":66,"FUNC":67,"PFUNC":68,"qualified_name":69,"->":70,"PRED":71,"pred_decl_option0":72,"block":73,"param_decls":74,"[":75,"param_decl":76,"param_decls_repetition0":77,"]":78,"expr":79,"block_repetition0":80,"fun_decl":81,"fun_decl_group0":82,"fun_decl_option0":83,"fun_decl_option1":84,"fun_decl_option2":85,"helper_mult":86,"atom":87,"qualified_expr":88,"quantified_expr":89,"logical_expr":90,"unary_expr":91,"let_expr":92,"(":93,")":94,"OR":95,"XOR":96,"AND":97,"IFF":98,"IMPLIES":99,"ELSE":100,"unary_op":101,"binary_expr":102,"binary_op":103,"implies_else_expr":104,"quantifer":105,"quantified_expr_option0":106,"var_decls":107,"block_or_bar":108,"LET":109,"let_decl_list":110,"function_call":111,"expr_list":112,".":113,"@":114,"`":115,"let_decl":116,"let_decl_list_repetition0":117,"=":118,"bar":119,"|":120,"quantifier":121,"ALL":122,"NO":123,"var_decl_item":124,"var_decls_repetition0":125,"IDEN_list":126,"UNTIL":127,"RELEASE":128,"SINCE":129,"TRIGGERED":130,"!=":131,"IN":132,"NOT":133,"<":134,">":135,"<=":136,">=":137,"+":138,"&":139,"ALWAYS":140,"EVENTUALLY":141,"AFTER":142,"BEFORE":143,"ONCE":144,"HISTORICALLY":145,"~":146,"^":147,"*":148,"expr_list_repetition0":149,"ASSERT":150,"assert_decl_option0":151,"cmd_decl_group0":152,"cmd_decl_group1":153,"cmd_decl_option0":154,"EXPECT":155,"expect_decl_option0":156,"test_block":157,"TEST":158,"test_decl_option0":159,"test_block_repetition0":160,"test_case":161,"test_case_option0":162,"test_case_body":163,"test_case_label":164,"test_case_body_group0":165,"test_case_body_option0":166,"IS":167,"test_case_body_group1":168,"example_decl":169,"EXAMPLE":170,"FOR":171,"bounds":172,"property_decl":173,"property_decl_group0":174,"property_decl_option0":175,"property_decl_option1":176,"INST":177,"inst_decl_option0":178,"scope":179,"scope_option0":180,"typescope_list":181,"typescope":182,"typescope_list_repetition0":183,"typescope_option0":184,"bounds_repetition0":185,"bound_statement":186,"qualifier":187,"DISJ":188,"RUN":189,"CHECK":190,"SAT":191,"UNSAT":192,"UNKNOWN":193,"THEOREM":194,"FORGE_ERROR":195,"SUFFICIENT":196,"NECESSARY":197,"BUT":198,"EXACTLY":199,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"LANG",13:"FORGE",14:"FORGE_FROGLET",15:"FORGE_TEMPORAL",18:"OPEN",21:"FILEPATH",23:"AS",24:"IDEN",27:"OPTION",29:"NUMBER",30:"-",43:"SIG",45:"{",47:"}",49:"TWO",50:"ONE",51:"LONE",52:"SOME",54:"VAR",55:"ABSTRACT",57:"EXTENDS",62:":",65:",",66:"SET",67:"FUNC",68:"PFUNC",70:"->",71:"PRED",75:"[",78:"]",93:"(",94:")",95:"OR",96:"XOR",97:"AND",98:"IFF",99:"IMPLIES",100:"ELSE",105:"quantifer",109:"LET",113:".",114:"@",115:"`",118:"=",120:"|",122:"ALL",123:"NO",127:"UNTIL",128:"RELEASE",129:"SINCE",130:"TRIGGERED",131:"!=",132:"IN",133:"NOT",134:"<",135:">",136:"<=",137:">=",138:"+",139:"&",140:"ALWAYS",141:"EVENTUALLY",142:"AFTER",143:"BEFORE",144:"ONCE",145:"HISTORICALLY",146:"~",147:"^",148:"*",150:"ASSERT",155:"EXPECT",158:"TEST",167:"IS",170:"EXAMPLE",171:"FOR",177:"INST",187:"qualifier",188:"DISJ",189:"RUN",190:"CHECK",191:"SAT",192:"UNSAT",193:"UNKNOWN",194:"THEOREM",195:"FORGE_ERROR",196:"SUFFICIENT",197:"NECESSARY",198:"BUT",199:"EXACTLY"},
productions_: [0,[3,2],[3,1],[6,0],[4,4],[7,2],[12,1],[12,1],[12,1],[8,1],[17,3],[19,1],[22,2],[9,1],[26,3],[28,1],[28,1],[28,1],[28,2],[10,1],[32,1],[32,1],[35,0],[35,1],[35,1],[35,1],[35,1],[35,1],[33,8],[48,1],[48,1],[48,1],[48,1],[53,1],[53,1],[53,2],[53,2],[56,2],[58,2],[59,5],[59,4],[61,1],[61,3],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[64,1],[64,3],[34,4],[74,4],[76,3],[73,3],[81,10],[86,1],[86,1],[86,1],[86,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,3],[79,1],[90,3],[90,3],[90,3],[90,3],[90,3],[90,5],[91,2],[102,3],[104,5],[89,4],[92,3],[111,4],[88,3],[88,3],[87,1],[87,2],[87,1],[87,2],[87,2],[110,2],[116,3],[108,1],[108,1],[119,2],[121,1],[121,1],[121,1],[121,1],[121,1],[107,2],[124,3],[126,1],[126,3],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,2],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[112,2],[69,1],[36,3],[37,3],[39,3],[38,4],[157,3],[161,2],[164,2],[163,4],[169,6],[173,8],[40,4],[179,3],[179,2],[181,2],[182,3],[172,3],[186,3],[16,0],[16,2],[20,0],[20,1],[25,0],[25,2],[31,0],[31,2],[41,0],[41,1],[42,0],[42,1],[44,0],[44,1],[46,0],[46,1],[60,0],[60,3],[72,0],[72,1],[77,0],[77,3],[80,0],[80,2],[82,1],[82,1],[83,0],[83,1],[84,0],[84,1],[85,0],[85,1],[106,0],[106,1],[117,0],[117,3],[125,0],[125,3],[149,0],[149,3],[151,0],[151,1],[152,1],[152,1],[153,1],[153,1],[154,0],[154,1],[156,0],[156,1],[159,0],[159,1],[160,0],[160,2],[162,0],[162,1],[165,1],[165,1],[166,0],[166,1],[168,1],[168,1],[168,1],[168,1],[168,1],[174,1],[174,1],[175,0],[175,1],[176,0],[176,2],[178,0],[178,1],[180,0],[180,2],[183,0],[183,3],[184,0],[184,1],[185,0],[185,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 4:
 this.$ = parserActions.createForgeModule($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], this._$); 
break;
case 5: case 9: case 12: case 13: case 19: case 32: case 37: case 48: case 91:
 this.$ = $$[$0]; 
break;
case 10:
 this.$ = parserActions.createImportStatement($$[$0-1], $$[$0], this._$); 
break;
case 14:
 this.$ = parserActions.createOptionStatement($$[$0-1], $$[$0]); 
break;
case 18:
 this.$ = -$$[$0]; 
break;
case 28:
 this.$ = parserActions.createSigDecl($$[$0-7] || [], $$[$0-6] || [], parserActions.createIdentifier($$[$0-4], _$[$0-4]), $$[$0-3], $$[$0-1], this._$); 
break;
case 33:
 this.$ = ['var']; 
break;
case 34:
 this.$ = ['abstract']; 
break;
case 35:
 this.$ = ['var', 'abstract']; 
break;
case 36:
 this.$ = ['abstract', 'var']; 
break;
case 38: case 87: case 97:
 this.$ = [$$[$0-1]].concat($$[$0].map(d => d[1])); 
break;
case 39:
 this.$ = parserActions.createFieldDecl(true, $$[$0-3], $$[$0-1], $$[$0], this._$); 
break;
case 40:
 this.$ = parserActions.createFieldDecl(false, $$[$0-3], $$[$0-1], $$[$0], this._$); 
break;
case 41:
 this.$ = [parserActions.createIdentifier($$[$0], _$[$0])]; 
break;
case 42:
 this.$ = $$[$0-2].concat([parserActions.createIdentifier($$[$0], _$[$0])]); 
break;
case 50:
 this.$ = parserActions.createExpr('->', {left: $$[$0-2], right: $$[$0]}, this._$); 
break;
case 51:
 this.$ = parserActions.createPredDecl(parserActions.createIdentifier($$[$0-2], _$[$0-2]), $$[$0-1] || [], $$[$0], this._$); 
break;
case 52:
 this.$ = [$$[$0-2]].concat($$[$0-1].map(p => p[1])); 
break;
case 53:
 this.$ = parserActions.createParamDecl($$[$0-2], $$[$0], this._$); 
break;
case 54:
 this.$ = parserActions.createBlock($$[$0-1], this._$); 
break;
case 55:
 this.$ = parserActions.createFunDecl($$[$0-8], $$[$0-7], $$[$0-6], $$[$0-4], $$[$0-3], $$[$0-1], this._$); 
break;
case 66: case 151:
 this.$ = $$[$0-1]; 
break;
case 68:
 this.$ = parserActions.createExpr('binary', {op: 'OR', left: $$[$0-2], right: $$[$0]}, this._$); 
break;
case 74:
 this.$ = parserActions.createExpr($$[$0-1], {operand: $$[$0]}, this._$); 
break;
case 76:
 this.$ = parserActions.createExpr('implies_else', {condition: $$[$0-4], consequent: $$[$0-2], alternative: $$[$0]}, this._$); 
break;
case 77:
 this.$ = parserActions.createExpr('quantified', {quantifier: $$[$0-3], disj: $$[$0-2], declarations: $$[$0-1], body: $$[$0]}, this._$); 
break;
case 78:
 this.$ = parserActions.createExpr('let', {declarations: $$[$0-1], body: $$[$0]}, this._$); 
break;
case 79:
 this.$ = parserActions.createExpr('function_call', {base: $$[$0-3], args: $$[$0-1]}, this._$); 
break;
case 80: case 81:
 this.$ = parserActions.createExpr('qualified_expr', {base: $$[$0-2], name: $$[$0]}, this._$); 
break;
case 82:
 this.$ = parserActions.createExpr('number', {value: $$[$0]}, this._$); 
break;
case 83:
 this.$ = parserActions.createExpr('number', {value: -$$[$0]}, this._$); 
break;
case 85:
 this.$ = parserActions.createExpr('at', {name: $$[$0]}, this._$); 
break;
case 86:
 this.$ = parserActions.createExpr('backquote', {name: $$[$0]}, this._$); 
break;
case 88:
 this.$ = {name: $$[$0-2], value: $$[$0]}; 
break;
case 98:
 this.$ = {names: $$[$0-2], type: $$[$0]}; 
break;
case 99:
 this.$ = [$$[$0]]; 
break;
case 100:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 134:
 this.$ = [$$[$0-1]].concat($$[$0].map(e => e[1])); 
break;
case 152:
 this.$ = { type: $$[$0-2], value: $$[$0] }; 
break;
case 153: case 157: case 159: case 169: case 173: case 175: case 187: case 189: case 191: case 205: case 228: case 232:
this.$ = [];
break;
case 154: case 158: case 160: case 176: case 206: case 233:
$$[$0-1].push($$[$0]);
break;
case 170: case 174: case 188: case 190: case 192: case 229:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[1,3],7:4,11:[1,5]},{1:[3]},{5:[1,6]},{1:[2,2]},o($V0,[2,153],{8:7,16:8}),{12:9,13:[1,10],14:[1,11],15:[1,12]},{1:[2,1]},o($V1,[2,157],{9:13,25:14}),o($V1,[2,9],{17:15,18:[1,16]}),o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,7]),o($V0,[2,8]),o($V2,[2,159],{10:17,31:18}),o($V2,[2,13],{26:19,27:[1,20]}),o($V0,[2,154]),{19:21,21:[1,22]},{5:[2,4]},o($V3,[2,161],{32:23,33:24,34:25,41:26,53:28,5:[2,19],54:[1,29],55:[1,30],71:[1,27]}),o($V1,[2,158]),{24:[1,31]},o($V0,[2,155],{20:32,22:33,23:[1,34]}),o([5,18,23,27,43,49,50,51,52,54,55,71],[2,11]),o($V2,[2,160]),o($V2,[2,20]),o($V2,[2,21]),{42:35,43:[2,163],48:36,49:[1,37],50:[1,38],51:[1,39],52:[1,40]},{24:[1,41]},o($V3,[2,162]),o($V3,[2,33],{55:[1,42]}),o($V3,[2,34],{54:[1,43]}),{21:[1,46],24:[1,45],28:44,29:[1,47],30:[1,48]},o($V0,[2,10]),o($V0,[2,156]),{24:[1,49]},{43:[1,50]},{43:[2,164]},{43:[2,29]},{43:[2,30]},{43:[2,31]},{43:[2,32]},{45:[2,171],72:51,74:52,75:[1,53]},o($V3,[2,35]),o($V3,[2,36]),o($V1,[2,14]),o($V1,[2,15]),o($V1,[2,16]),o($V1,[2,17]),{29:[1,54]},o($V0,[2,12]),{24:[1,55]},{45:$V4,73:56},{45:[2,172]},{24:$V5,76:58},o($V1,[2,18]),{44:60,45:[2,165],56:61,57:[1,62]},o($V2,[2,51]),o($V6,[2,175],{80:63}),o($V7,[2,173],{77:64}),{62:[1,65]},{45:[1,66]},{45:[2,166]},{24:[1,67]},{24:$V8,29:$V9,30:$Va,45:$V4,47:[1,68],49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:69,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{65:[1,103],78:[1,102]},{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:104,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{24:$Vw,46:105,47:[2,167],54:$Vx,58:106,59:107,61:109},{45:[2,37]},o([5,24,29,30,43,45,47,49,50,51,52,54,55,65,66,71,78,93,94,95,96,97,98,99,100,105,109,114,115,120,123,133,140,141,142,143,144,145,146,147,148],[2,54]),o($V6,[2,176],{95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC}),o($VD,[2,60]),o($VD,[2,61],{113:[1,116]}),o($VD,[2,62]),o($VD,[2,63]),o($VD,[2,64]),o($VD,[2,65]),{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:117,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},o($VD,[2,67]),o($VD,[2,82]),{29:[1,118]},o($VD,[2,84],{113:[1,119]}),{24:[1,120]},{24:[1,121]},{24:[2,185],106:122,188:[1,123]},{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:124,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{24:$VE,110:125,116:126},o($VF,[2,118]),o($VF,[2,119]),o($VF,[2,120]),o($VF,[2,121]),o($VF,[2,122]),o($VF,[2,123]),o($VF,[2,124]),o($VF,[2,125]),o($VF,[2,126]),o($VF,[2,127]),o($VF,[2,128]),o($VF,[2,129]),o($VF,[2,130]),o($VF,[2,131]),o($VF,[2,132]),o($VF,[2,133]),{45:[2,52]},{24:$V5,76:128},o($V7,[2,53],{95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC}),{47:[1,129]},{47:[2,168]},o($VG,[2,169],{60:130}),{24:$Vw,61:131},{62:[1,132],65:$VH},o($VI,[2,41]),{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:134,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:135,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:136,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:137,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:138,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{24:[1,139]},{94:[1,140],95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC},o($VD,[2,83]),{24:[1,141]},o($VD,[2,85]),o($VD,[2,86]),{24:$VJ,107:142,124:143,126:144},{24:[2,186]},o($VK,[2,74],{95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC}),{45:$V4,73:147,108:146,119:148,120:$VL},o($VM,[2,187],{117:150}),{118:[1,151]},o($V7,[2,174]),o($V2,[2,28]),{47:[2,38],65:[1,152]},{62:[1,153],65:$VH},{49:$VN,50:$VO,51:$VP,63:154,66:$VQ,67:$VR,68:$VS},{24:[1,161]},o([24,29,30,45,47,49,50,51,52,65,66,78,93,94,95,100,105,109,114,115,120,123,133,140,141,142,143,144,145,146,147,148],[2,68],{96:$Vz,97:$VA,98:$VB,99:$VC}),o([24,29,30,45,47,49,50,51,52,65,66,78,93,94,95,96,100,105,109,114,115,120,123,133,140,141,142,143,144,145,146,147,148],[2,69],{97:$VA,98:$VB,99:$VC}),o([24,29,30,45,47,49,50,51,52,65,66,78,93,94,95,96,97,100,105,109,114,115,120,123,133,140,141,142,143,144,145,146,147,148],[2,70],{98:$VB,99:$VC}),o($VT,[2,71],{99:$VC}),o([24,29,30,45,47,49,50,51,52,65,66,78,93,94,95,96,97,98,105,109,114,115,120,123,133,140,141,142,143,144,145,146,147,148],[2,72],{99:$VC,100:[1,162]}),o($VU,[2,81]),o($VD,[2,66]),o($VU,[2,80]),{45:$V4,73:147,108:163,119:148,120:$VL},o($VM,[2,189],{125:164}),{62:[1,165],65:[1,166]},o($VI,[2,99]),o($VD,[2,78]),o($VD,[2,89]),o($VD,[2,90]),{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:167,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},o($VV,[2,87],{65:[1,168]}),{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:169,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{24:$Vw,54:$Vx,59:170,61:109},{49:$VN,50:$VO,51:$VP,63:171,66:$VQ,67:$VR,68:$VS},{24:$VW,64:172,69:173},{24:[2,43]},{24:[2,44]},{24:[2,45]},{24:[2,46]},{24:[2,47]},{24:[2,48]},o($VI,[2,42]),{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:175,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},o($VD,[2,77]),o($VV,[2,97],{65:[1,176]}),{24:$V8,29:$V9,30:$Va,45:$V4,49:$Vb,50:$Vc,51:$Vd,52:$Ve,66:$Vf,73:77,79:177,87:70,88:71,89:72,90:73,91:74,92:75,93:$Vg,101:84,105:$Vh,109:$Vi,114:$Vj,115:$Vk,123:$Vl,133:$Vm,140:$Vn,141:$Vo,142:$Vp,143:$Vq,144:$Vr,145:$Vs,146:$Vt,147:$Vu,148:$Vv},{24:[1,178]},o($VK,[2,91],{95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC}),{24:$VE,116:179},o($VM,[2,88],{95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC}),o($VG,[2,170]),{24:$VW,64:180,69:173},o($VG,[2,40]),o($VG,[2,49],{70:[1,181]}),o([47,65,70],[2,135]),o($VT,[2,73],{99:$VC}),{24:$VJ,124:182,126:144},o($VM,[2,98],{95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC}),o($VI,[2,100]),o($VM,[2,188]),o($VG,[2,39]),{24:$VW,64:183,69:173},o($VM,[2,190]),o($VG,[2,50])],
defaultActions: {3:[2,2],6:[2,1],17:[2,4],36:[2,164],37:[2,29],38:[2,30],39:[2,31],40:[2,32],52:[2,172],61:[2,166],67:[2,37],102:[2,52],106:[2,168],123:[2,186],155:[2,43],156:[2,44],157:[2,45],158:[2,46],159:[2,47],160:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* Definitions and imports go here */

const yy = {

};

const parserActions = {
    createIdentifier: function(name, location) {
        return {
            type: 'identifier',
            name: name,
            location: location
        };
    },

    createReference: function(identifier, location) {
        return {
            type: 'reference',
            name: identifier.name,
            location: location
        };
    },

    createSigDecl: function(modifiers, multiplicity, name, ext, fields, location) {
        return {
            type: 'sig_decl',
            name: name, 
            modifiers: modifiers,
            multiplicity: multiplicity,
            extends: ext,
            fields: fields,
            location: location
        };
    },

    createPredDecl: function(name, params, body, location) {
        return {
            type: 'pred_decl',
            name: name, 
            params: params,
            body: body,
            location: location
        };
    },

    createQualifiedName: function(parts, location) {
        return {
            type: 'qualified_name',
            name: parts.map(p => p.name).join('.'),
            parts: parts,
            location: location
        };
    },

    createFieldDecl: function(isVar, names, multiplicity, expr, location) {
        return {
            type: 'field_decl',
            isVar: isVar,
            names: names.map(n => n.name),
            multiplicity: multiplicity,
            expr: expr,
            location: location
        };
    },

    createFunDecl: function(qualifier, name, params, returnMult, returnExpr, body, location) {
        return {
            type: 'fun_decl',
            qualifier: qualifier,
            name: name,
            params: params,
            returnMultiplicity: returnMult,
            returnExpr: returnExpr,
            body: body,
            location: location
        };
    },

    createForgeModule: function(langDecl, imports, options, paragraphs, location) {
        return {
            type: 'forge_module',
            langDeclaration: langDecl,
            imports: imports,
            options: options,
            paragraphs: paragraphs,
            location: location
        };
    },

    createImportStatement: function(file, alias, location) {
        return {
            type: 'import_statement',
            file: file,
            alias: alias,
            location: location
        };
    },

    createOptionStatement: function(name, value, location) {
        return {
            type: 'option_statement',
            name: name,
            value: value,
            location: location
        };
    },

    createBlock: function(exprs, location) {
        return {
            type: 'block',
            expressions: exprs,
            location: location
        }
    },

    createExpr: function(type, args, location) {
        return {
            type: type,
            ...args,
            location: location
        };
    },

    createParamDecl: function(name, type, location) {
        return {
            type: 'param_decl',
            name: name,
            paramType: type,
            location: location
        };
    }
};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
/* Definitions and imports go here */

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore whitespace */
break;
case 1:/* Ignore newlines */
break;
case 2:/* Ignore comment */
break;
case 3:/* Ignore comment */
break;
case 4:/* Ignore comment */
break;
case 5: /* Ignore multiline comments  DOESNT WORK*/ 
break;
case 6:return 11;
break;
case 7:return 15;
break;
case 8:return 14;
break;
case 9:return 13;
break;
case 10:return 118;
break;
case 11:return 131;
break;
case 12:return 134;
break;
case 13:return 136;
break;
case 14:return 135;
break;
case 15:return 137;
break;
case 16:return 18;
break;
case 17:return 23;
break;
case 18:return 27;
break;
case 19:return 43;
break;
case 20:return 55;
break;
case 21:return 57;
break;
case 22:return 54;
break;
case 23:return 132;
break;
case 24:return 51;
break;
case 25:return 50;
break;
case 26:return 66;
break;
case 27:return 68;
break;
case 28:return 67;
break;
case 29:return 188;
break;
case 30:return 71;
break;
case 31:return 109;
break;
case 32:return 97;
break;
case 33:return 95;
break;
case 34:return 96;
break;
case 35:return 99;
break;
case 36:return 100;
break;
case 37:return 99;
break;
case 38:return 98;
break;
case 39:return 98;
break;
case 40:return 127;
break;
case 41:return 128;
break;
case 42:return 129;
break;
case 43:return 130;
break;
case 44:return 139;
break;
case 45:return 115;
break;
case 46:return 70;
break;
case 47:return 120;
break;
case 48:return 138;
break;
case 49:return 30;
break;
case 50:return 148;
break;
case 51:return 'PRIME';
break;
case 52:return 146;
break;
case 53:return 147;
break;
case 54:return 122;
break;
case 55:return 52;
break;
case 56:return 123;
break;
case 57:return 'NONE';
break;
case 58:return 133;
break;
case 59:return 140;
break;
case 60:return 141;
break;
case 61:return 142;
break;
case 62:return 143;
break;
case 63:return 144;
break;
case 64:return 145;
break;
case 65:return 150;
break;
case 66:return 190;
break;
case 67:return 189;
break;
case 68:return 155;
break;
case 69:return 177;
break;
case 70:return 158;
break;
case 71:return 167;
break;
case 72:return 191;
break;
case 73:return 192;
break;
case 74:return 193;
break;
case 75:return 194;
break;
case 76:return 195;
break;
case 77:return 196;
break;
case 78:return 197;
break;
case 79:return 'SUITE';
break;
case 80:return 171;
break;
case 81:return 198;
break;
case 82:return 199;
break;
case 83:return 75;
break;
case 84:return 78;
break;
case 85:return 45;
break;
case 86:return 47;
break;
case 87:return 93;
break;
case 88:return 94;
break;
case 89:return 113;
break;
case 90:return 65;
break;
case 91:return 62;
break;
case 92:return 29;
break;
case 93:return 24;
break;
case 94:return 21;
break;
case 95: console.log('Unmatched text: ' + yy_.yytext); 
break;
case 96:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\n]+)/,/^(?:--.*)/,/^(?:\/\/.*)/,/^(?:\/\\\*.*\\\*\/)/,/^(?:\/\\\*\[\^\*\]\*\\\*\+\(\?:\[\^\/\*\]\[\^\*\]\*\\\*\+\)\*\/)/,/^(?:#lang\b)/,/^(?:forge\/temporal\b)/,/^(?:forge\/bsl\b)/,/^(?:forge\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:open\b)/,/^(?:as\b)/,/^(?:option\b)/,/^(?:sig\b)/,/^(?:abstract\b)/,/^(?:extends\b)/,/^(?:var\b)/,/^(?:in\b)/,/^(?:lone\b)/,/^(?:one\b)/,/^(?:set\b)/,/^(?:pfunc\b)/,/^(?:func\b)/,/^(?:disj\b)/,/^(?:pred\b)/,/^(?:let\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:xor\b)/,/^(?:implies\b)/,/^(?:else\b)/,/^(?:=>)/,/^(?:iff\b)/,/^(?:<=>)/,/^(?:until\b)/,/^(?:release\b)/,/^(?:since\b)/,/^(?:triggered\b)/,/^(?:&)/,/^(?:`)/,/^(?:->)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:')/,/^(?:~)/,/^(?:\^)/,/^(?:all\b)/,/^(?:some\b)/,/^(?:no\b)/,/^(?:none\b)/,/^(?:not\b)/,/^(?:always\b)/,/^(?:eventually\b)/,/^(?:after\b)/,/^(?:before\b)/,/^(?:once\b)/,/^(?:historically\b)/,/^(?:assert\b)/,/^(?:check\b)/,/^(?:run\b)/,/^(?:expect\b)/,/^(?:inst\b)/,/^(?:test\b)/,/^(?:is\b)/,/^(?:sat\b)/,/^(?:unsat\b)/,/^(?:unknown\b)/,/^(?:theorem\b)/,/^(?:forge_error\b)/,/^(?:sufficient\b)/,/^(?:necessary\b)/,/^(?:suite\b)/,/^(?:for\b)/,/^(?:but\b)/,/^(?:exactly\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z0-9_]+)/,/^(?:"[^\"]*")/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = forge;
exports.Parser = forge.Parser;
exports.parse = function () { return forge.parse.apply(forge, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}